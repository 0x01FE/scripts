#!/usr/local/bin/python3.11

import subprocess
import argparse
import warnings

from colorama import init as colorama_init
from colorama import Fore
from colorama import Style

class Pod:
    name: str
    amount: str
    status: str
    restarts: int
    age: str

    def __init__(self, pod_info: str):
        pod_info = pod_info.split()
        self.name = pod_info[0]
        self.amount = pod_info[1]
        self.status = pod_info[2]
        self.restarts = pod_info[3]
        self.age = pod_info[-1]

colorama_init()

warnings.filterwarnings("ignore")
parser = argparse.ArgumentParser(prog="kgpl",
                                 description="Gets pod logs with grep and KubeCTL",
                                 epilog="Made by J.D.H.")

parser.add_argument('podname')
parser.add_argument('-n', '--namespace', help="Namespace where the pod is located")
parser.add_argument('-F', '--file', action="store_true", help="Stores pod logs in a file in the current directory with the name (Pod-Name.log)")
parser.add_argument('-i', '--index', help="Index of the pod (Default = 0)")

def main() -> None:

    args = parser.parse_args()

    pod_name: str = args.podname
    namespace: str | None = args.namespace
    pod_index: int = int(args.index) if args.index else 0

    pods: list[Pod] = get_pods(pod_name, namespace)

    if pods:
        pod = pods[pod_index]
    else:
        print(f'{Fore.RED}ERROR{Style.RESET_ALL}: No pods found with name {Fore.BLUE}{pod_name}{Style.RESET_ALL}')
        exit(1)

    result: str = get_logs(pod.name, namespace)

    print(result)
    print(f'{Fore.GREEN}Pods found{Style.RESET_ALL}:')
    for i, pod in enumerate(pods):
        print(f' [{i}]  {Fore.LIGHTBLUE_EX}{pod.name}{Style.RESET_ALL}  {pod.status}  {pod.age}')

    if args.file:
        with open(f'{pod.name}.log', 'w+') as file:
            file.write(result)
            print(f'{Fore.MAGENTA}Logs written to {pod.name}.log{Style.RESET_ALL}')


def get_pods(pod_name: str, namespace: str | None = None) -> list[Pod]:

    result: subprocess.CompletedProcess[bytes] = subprocess.run(f'kubectl get pods{"--namespace " + namespace if namespace else ""} | grep {pod_name}', stdout=subprocess.PIPE, shell=True)

    result: list[str] = result.stdout.decode().split('\n')

    if result:
        pods: list[Pod] = []
        for pod_info in result:
            if pod_info:
                pods.append(Pod(pod_info))
    else:
        print(f"No pods found with name {pod_name}")
        exit(1)

    return pods

def get_logs(pod_name: str, namespace: str | None = None) -> str:

    result: subprocess.CompletedProcess[bytes] = subprocess.run(f'kubectl logs {pod_name}{" --namespace " + namespace if namespace else ""}', shell=True, stdout=subprocess.PIPE)

    return result.stdout.decode()

if __name__ == "__main__":
    main()

