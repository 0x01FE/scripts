#!/usr/local/bin/python3

import subprocess
import argparse

from colorama import init as colorama_init
from colorama import Fore
from colorama import Style

class Pod:
    name: str
    amount: str
    status: str
    restarts: int
    age: str

    def __init__(self, pod_info: str):
        pod_info = pod_info.split()
        self.name = pod_info[0]
        self.amount = pod_info[1]
        self.status = pod_info[2]
        self.restarts = pod_info[3]
        self.age = pod_info[-1]

    def __str__(self) -> str:
        s = f'{Fore.LIGHTBLUE_EX}{self.name}{Style.RESET_ALL}  {self.amount}  '
        c = Fore.WHITE
        if self.status == "Running":
            c = Fore.LIGHTGREEN_EX
        elif self.status == "Starting":
            c = Fore.CYAN

        s += f'{c}{self.status}{Style.RESET_ALL}  {self.restarts}  {self.age}'

        return s

    def get_logs(self, namespace: str | None = None) -> str:
        result: subprocess.CompletedProcess[bytes] = subprocess.run(f'kubectl logs {self.name}{" --namespace " + namespace if namespace else ""}', shell=True, stdout=subprocess.PIPE)

        return result.stdout.decode()


colorama_init()

parser = argparse.ArgumentParser(prog="kgpl",
                                 description="Kubectl Get Pod Logs (KGPL)",
                                 epilog="Made by J.D.H.")

parser.add_argument('podname')
parser.add_argument('-n', '--namespace', help="Namespace where the pod is located")
parser.add_argument('-F', '--file', action="store_true", help="Stores pod logs in a file in the current directory with the name (Pod-Name.log)")
parser.add_argument('-i', '--index', help="Index of the pod (Default=0)", default=0)

def main() -> None:

    args = parser.parse_args()

    pod_name: str = args.podname
    namespace: str | None = args.namespace
    pod_index: int = int(args.index) if args.index else 0

    pods: list[Pod] = get_pods(pod_name, namespace)

    if pods:
        pod = pods[pod_index]
    else:
        print(f'{Fore.RED}ERROR{Style.RESET_ALL}: No pods found with name {Fore.BLUE}{pod_name}{Style.RESET_ALL}')
        exit(1)

    logs: str = pod.get_logs(namespace)

    print(logs)
    print(f'{Fore.GREEN}Pods found{Style.RESET_ALL}:')
    print(f"SELECTED INDEX NAME{(len(pods[0].name) - 3) * ' '}STATUS     RESTARTS AGE")
    for i, pod in enumerate(pods):
        print(f'{"*" + " " * 8 if i == pod_index else " " * 9}[{i}]  {pod}')

    if args.file:
        with open(f'{pod.name}.log', 'w+') as file:
            file.write(logs)
            print(f'{Fore.MAGENTA}Logs written to {pod.name}.log{Style.RESET_ALL}')


def get_pods(pod_name: str, namespace: str | None = None) -> list[Pod] | None:

    result: subprocess.CompletedProcess[bytes] = subprocess.run(f'kubectl get pods{"--namespace " + namespace if namespace else ""} | grep {pod_name}', stdout=subprocess.PIPE, shell=True)

    result: list[str] = result.stdout.decode().split('\n')

    if result:
        pods: list[Pod] = []
        for pod_info in result:
            if pod_info:
                pods.append(Pod(pod_info))
    else:
        print(f"No pods found with name {pod_name}")
        exit(1)

    return pods if pods else None

if __name__ == "__main__":
    main()

