#!/usr/local/bin/python3

import subprocess
import argparse

from rich.console import Console
from rich.table import Table

console = Console()

class Pod:
    name: str
    ready: str
    status: str
    restarts: int
    age: str

    def __init__(self, pod_info: str):
        pod_info = pod_info.split()
        self.name = pod_info[0]
        self.ready = pod_info[1]
        self.status = pod_info[2]
        self.restarts = pod_info[3]
        self.age = pod_info[-1]

    def highlight_name(self, pod_name: str) -> str:
        name_i: int = self.name.find(pod_name)
        name_end_i: int = name_i + len(pod_name)
        return f'[deep_sky_blue1]{self.name[:name_i]}[u reverse]{self.name[name_i:name_end_i]}[/u reverse]{self.name[name_end_i:]}[/deep_sky_blue1]'

    def get_status(self) -> str:
        c = f'[bold red1]{self.status}[/bold red1]'

        match self.status:
            case "Running":
                c = f'[green1]{self.status}[/green1]'
            case "Starting":
                c = f'[cyan]{self.status}[/cyan]'
            case "Completed":
                c = f'[green]{self.status}[/green]'
            case "Error":
                c = f'[red1 reverse b]{self.status}[/red1 reverse b]'

        return c

    def get_logs(self, namespace: str | None = None) -> str:
        result: subprocess.CompletedProcess[bytes] = subprocess.run(f'kubectl logs {self.name}{" --namespace " + namespace if namespace else ""}', shell=True, stdout=subprocess.PIPE)

        return result.stdout.decode()


parser = argparse.ArgumentParser(prog="kgpl",
                                 description="Kubectl Get Pod Logs (KGPL)",
                                 epilog="Made by J.D.H.")

parser.add_argument('podname')
parser.add_argument('-n', '--namespace', help="Namespace where the pod is located")
parser.add_argument('-F', '--file', action="store_true", help="Stores pod logs in a file in the current directory with the name (Pod-Name.log)")
parser.add_argument('-i', '--index', help="Index of the pod (Default=0)", default=0)

def main() -> None:

    args = parser.parse_args()

    pod_name: str = args.podname
    namespace: str | None = args.namespace
    pod_index: int = int(args.index) if args.index else 0

    pods: list[Pod] = get_pods(pod_name, namespace)

    if pods:
        pod = pods[pod_index]
    else:
        console.print(f'[bold red1]ERROR[/bold red1]: No pods found with name [deep_sky_blue1]{pod_name}[/deep_sky_blue1]')
        exit(1)

    logs: str = pod.get_logs(namespace)

    print(logs)

    # Table Setup
    table = Table(title="[b spring_green1 not i]Pods[/b spring_green1 not i]")
    table.add_column("Selected")
    table.add_column("Index")
    table.add_column("Name")
    table.add_column("Status")
    table.add_column("Ready")
    table.add_column("Restarts")
    table.add_column("Age")


    for i, pod in enumerate(pods):

        table.add_row("[b]*[/b]" if i == pod_index else " ",
                      str(i),
                      pod.highlight_name(pod_name),
                      pod.get_status(),
                      pod.ready,
                      pod.restarts,
                      pod.age)

    console.print(table)

    if args.file:
        with open(f'{pod.name}.log', 'w+') as file:
            file.write(logs)
            console.print(f'[magenta]Logs written to {pod.name}.log[/magenta]')


def get_pods(pod_name: str, namespace: str | None = None) -> list[Pod] | None:

    result: subprocess.CompletedProcess[bytes] = subprocess.run(f'kubectl get pods{"--namespace " + namespace if namespace else ""} | grep {pod_name}', stdout=subprocess.PIPE, shell=True)

    result: list[str] = result.stdout.decode().split('\n')

    if result:
        pods: list[Pod] = []
        for pod_info in result:
            if pod_info:
                pods.append(Pod(pod_info))
    else:
        print(f"No pods found with name {pod_name}")
        exit(1)

    return pods if pods else None

if __name__ == "__main__":
    main()

